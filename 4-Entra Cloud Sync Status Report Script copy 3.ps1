#Requires -Modules PSWriteHTML

function Start-EntraCloudSyncWithReport {
    [CmdletBinding()]
    param (
        [Parameter()]
        [string]$OutputPath = "$env:USERPROFILE\Desktop\EntraSync",
        [Parameter()]
        [string]$ModulePath = "C:\Program Files\Microsoft Azure AD Connect Provisioning Agent\Utility\AADCloudSyncTools"
    )

    function Initialize-CloudSync {
        try {
            Import-Module $ModulePath -Force
            Connect-AADCloudSyncTools
            return $true
        }
        catch {
            Write-Error "Failed to initialize AADCloudSyncTools: $_"
            return $false
        }
    }

    function Get-FormattedJobStatus {
        $jobs = Get-AADCloudSyncToolsJobStatus
        
        $jobs | ForEach-Object {
            [PSCustomObject]@{
                'Job ID' = $_.id
                'Status' = $_.lastRun_state
                'Code' = $_.code
                'Last Run Start' = $_.lastRun_timeBegan
                'Last Run End' = $_.lastRun_timeEnded
                'Entities Processed' = $_.lastRun_countEntitled
                'Imported Count' = $_.lastRun_countImported
                'Exported Count' = $_.lastRun_countExported
                'Error Message' = $_.lastRun_error.message
            }
        }
    }

    function Export-StatusToHtml {
        param(
            [Parameter(Mandatory)]
            [object[]]$BeforeStatus,
            [Parameter(Mandatory)]
            [object[]]$AfterStatus,
            [Parameter(Mandatory)]
            [string]$OutputDir,
            [Parameter(Mandatory)]
            [datetime]$StartTime
        )

        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        $reportName = "EntraCloudSync_Report"
        $htmlPath = Join-Path $OutputDir "$($reportName)_$timestamp.html"
        $csvPath = Join-Path $OutputDir "$($reportName)_$timestamp.csv"

        # Export to CSV
        $AfterStatus | Export-Csv -Path $csvPath -NoTypeInformation

        $metadata = @{
            GeneratedBy = $env:USERNAME
            GeneratedOn = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            StartTime = $StartTime.ToString("yyyy-MM-dd HH:mm:ss")
            EndTime = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
            Duration = "{0:hh\:mm\:ss}" -f ((Get-Date) - $StartTime)
            TotalJobs = $AfterStatus.Count
            SuccessCount = ($AfterStatus | Where-Object Status -eq "Succeeded").Count
            FailureCount = ($AfterStatus | Where-Object Status -eq "Failed").Count
        }

        New-HTML -Title "Entra Cloud Sync Status Report" -FilePath $htmlPath -ShowHTML {
            New-HTMLSection -HeaderText "Sync Operation Summary" {
                New-HTMLPanel {
                    New-HTMLText -Text @"
                    <h3>Report Details</h3>
                    <ul>
                        <li>Generated By: $($metadata.GeneratedBy)</li>
                        <li>Start Time: $($metadata.StartTime)</li>
                        <li>End Time: $($metadata.EndTime)</li>
                        <li>Duration: $($metadata.Duration)</li>
                        <li>Total Jobs: $($metadata.TotalJobs)</li>
                        <li>Successful Jobs: $($metadata.SuccessCount)</li>
                        <li>Failed Jobs: $($metadata.FailureCount)</li>
                    </ul>
"@
                }
            }

            New-HTMLSection -HeaderText "Status Before Sync" {
                New-HTMLTable -DataTable $BeforeStatus -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Failed' -BackgroundColor Salmon -Color Black
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Succeeded' -BackgroundColor LightGreen -Color Black
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Active' -BackgroundColor LightBlue -Color Black
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'NotRun' -BackgroundColor LightGray -Color Black
                }
            }

            New-HTMLSection -HeaderText "Status After Sync" {
                New-HTMLTable -DataTable $AfterStatus -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Failed' -BackgroundColor Salmon -Color Black
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Succeeded' -BackgroundColor LightGreen -Color Black
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Active' -BackgroundColor LightBlue -Color Black
                    New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'NotRun' -BackgroundColor LightGray -Color Black
                }
            }
        }

        Write-Host "`nReports generated:" -ForegroundColor Green
        Write-Host "CSV Report: $csvPath" -ForegroundColor Green
        Write-Host "HTML Report: $htmlPath" -ForegroundColor Green

        return @{
            CSVPath = $csvPath
            HTMLPath = $htmlPath
        }
    }

    try {
        $startTime = Get-Date
        
        # Initialize connection
        if (-not (Initialize-CloudSync)) {
            throw "Failed to initialize required modules"
        }

        # Create output directory if it doesn't exist
        if (-not (Test-Path $OutputPath)) {
            New-Item -Path $OutputPath -ItemType Directory -Force | Out-Null
        }

        # Get status before sync
        Write-Host "Getting current status..."
        $beforeStatus = Get-FormattedJobStatus

        # Get and restart all jobs
        Write-Host "Starting sync operation..."
        $jobs = Get-AADCloudSyncToolsJob
        $jobs | ForEach-Object {
            Write-Host "Restarting job: $($_.Id)"
            Restart-AADCloudSyncToolsJob -Id $_.Id
        }

        # Wait a bit for jobs to start
        Write-Host "Waiting for jobs to process..."
        Start-Sleep -Seconds 30

        # Get status after sync
        Write-Host "Getting updated status..."
        $afterStatus = Get-FormattedJobStatus

        # Generate report
        Write-Host "Generating report..."
        $reportPaths = Export-StatusToHtml -BeforeStatus $beforeStatus -AfterStatus $afterStatus -OutputDir $OutputPath -StartTime $startTime

        Write-Host "`nOperation complete!" -ForegroundColor Green
        
        return $reportPaths
    }
    catch {
        Write-Error "Error during sync operation: $_"
    }
}


Start-EntraCloudSyncWithReport -OutputPath "C:\Reports\EntraSync"